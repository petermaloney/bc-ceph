#!/bin/bash
#
# Licensed GNU GPLv2; if you did not recieve a copy of the license, get one at http://www.gnu.org/licenses/gpl-2.0.html

# OSD device:
# ===========
# The osd device will be wiped and all data destroyed.
# The osd device is expected to be a whole disk.
# If you use a serial, make sure it's unique as seen by smartctl or it will break something. Use -d to override the osddevice and set a custom serial if they aren't unique.
#
# Journal device:
# ===========
# The journal device is handled with more care, and will only create partitions.
# The partition table will be created if the journal is colocated, but is required to exist already for separate journals.
# The partition for the separate journal must not exist, and will be created.
# The journal device you specify is not the partition but the device with the partition table.
#
# Bluestore wal and db:
# ====================
# Currently hardcoded sizes... just for testing purposes.
# Specify the device by setting --journal.
#
# Bcache device:
# ===========
# The partition for the bcache cache device must already exist, and either be specified exactly, eg. /dev/sda3 or /dev/disk/by-partlabel/mybcache, or you can specify the device with a GPT partition table, and it will look for a partition with a label ending with "-bcache" or "_bcache"

########################
# CLI Handling
########################

usage() {
    echo "$0 [--store {xfs|ext4|btrfs|bluestore}] [-w <weight>] [-j <size>] [--db-size <size>] [--wal-size <size>] [-c <cluster>] [-d <osddevice>] [--bcache <cache_device>] [--no-start] [--journal <journal-device>] <serial>"
    
    # TODO: currently --journal specifies the device for wal and db for bluestore. Separate wal and db block device and size --wal --db --wal-size --db-size
}

weight=
# journals are supposed to be something like 1GiB, but let's just make some extra... the ssd is too huge anyway and this is still nothing
# this is GiB, not GB
journal_size=16G

# defaults come from http://www.spinics.net/lists/ceph-devel/msg29861.html and https://github.com/ceph/cbt/blob/master/example/bluestore/mkpart_hdd_nvme_bs.sh
# added +2 to db_size though... maybe an error (includes wal?) or I forget which link might have suggested it
db_size=10G
wal_size=2G

cluster=ceph

# This is the whole device given for the OSD. If the journal is colocated, this will be partitioned.
whole_osddevice=

# This is the bcache cache device
bcache_cache=

# This is the device with many shared journals
whole_journal=

start=1
colocated=false
store=xfs

validate_size() {
    local name="$1"
    local size="$2"
    # numbers, then optional decimal plus more numbers, then either G or M 
    # what works as a unit dependson what sgdisk supports...so I'll support only what I know works
    if ! grep -E "^[0-9]+[GM]$" <<< "$size"; then
        echo "ERROR: ${name} \"$size\" is invalid; you must have only a whole number and a unit without spaces, eg. 1G or 900M"
        exit 1
    fi
}

while [ "$#" != 0 ]; do
    if [ "$1" = "-j" ]; then
        journal_size="$2"
        validate_size "journal size" "$journal_size"
        shift
    elif [ "$1" = "--db-size" ]; then
        db_size="$2"
        validate_size "db size" "$db_size"
        shift
    elif [ "$1" = "--wal-size" ]; then
        wal_size="$2"
        validate_size "wal size" "$wal_size"
        shift
    elif [ "$1" = "-w" ]; then
        weight="$2"
        shift
    elif [ "$1" = "-c" ]; then
        cluster="$2"
        shift
    elif [ "$1" = "-d" ]; then
        whole_osddevice="$2"
        shift
    elif [ "$1" = "--bcache" ]; then
        bcache_cache="$2"
        shift
    elif [ "$1" = "--journal" ]; then
        whole_journal="$2"
        shift
    elif [ "$1" = "--no-start" ]; then
        start=0
    elif [ "$1" = "--store" ]; then
        store="$2"
        shift
    elif [ "$1" = "--help" ]; then
        usage
        exit 1
    else
        args+=("$1")
    fi
    shift
done

serial="${args[0]}"
hostname=$(hostname -s)

if [ -n "$whole_journal" -a ! -e "$whole_journal" ]; then
    echo "ERROR: journal \"$whole_journal\" does not exist"
    usage
    exit 1
fi
if [ -z "$serial" ]; then
    echo "ERROR: serial is required. If the disk does not have a serial, such as a VM, give a fake one eg. \"osd0\" and set -d too"
    usage
    exit 1
fi

########################
# Global variables
########################

# when using bcache, the backing device where the osddevice is created. When this is set (eg. /dev/sdb), osd_block (bluestore) or osd_data (non-bluestore) gets changed (eg. /dev/bcache0)
bcache_backing=

# the osd block device (bluestore only)
osd_block=

# the osd device that gets mounted (eg. xfs, ext4, btrfs, or the xfs for bluestore).
osd_data=

# This is the specific place where the journal is. If it's colocated, it's a child of whole_osddevice.
journal=

########################
# Functions
########################

check_deps() {
    abort=false
    
    cmds=(sgdisk parted mkfs.xfs diff awk ceph ceph-osd bc)
    if [ -n "$bcache" ]; then
        cmds+=(bcache-super-show make-bcache)
    fi
    if [ -z "$whole_osddevice" ]; then
        cmds+=(smartctl)
    fi
    for cmd in "${cmds[@]}"; do
        if ! which "${cmd}" >/dev/null 2>&1; then
            echo "ERROR: ${cmd} is not installed... aborting" >&2
            abort=true
        fi
    done
    
    if [ "$abort" = true ]; then
        exit 1
    fi
}

# Creates the bcache backing device and attaches it to the cache
# It assumes the bcache cache device has a partlabel ending in "-bcache", and aborts if there are multiple matches.
make_bcache() {
    local bcache_backing="$1"
    local bcache="$2"
    
    if ! lsmod | grep -q ^bcache; then
        echo "Waiting for bcache kernel module to load (for /sys/fs/bcache to appear)..."
        modprobe bcache
        while [ ! -e /sys/fs/bcache ]; do sleep 0.1; done
        
        if ! grep -q bcache /etc/initramfs-tools/modules; then
            echo bcache >> /etc/initramfs-tools/modules
            update-initramfs -uk all
        fi
    fi
    
    echo "INFO: creating bcache backing device \"$bcache_backing\""
    make-bcache -B "$bcache_backing"
    echo "$bcache_backing" > /sys/fs/bcache/register 2>/dev/null
    
    
    ## the /dev/bcache/by-uuid/ links are unreliable, so use this method
    disk_name=$(basename "$(readlink -f "$bcache_backing")")
    bcache_name=$(basename "$(readlink -f "/sys/class/block/${disk_name}/bcache/dev")")
    # osd_block and osd_data are global
    if [ -n "$osd_block" -a "$osd_block" = "$bcache_backing" ]; then
        osd_block="/dev/$bcache_name"
    fi
    if [ -n "$osd_data" -a "$osd_data" = "$bcache_backing" ]; then
        osd_data="/dev/$bcache_name"
    fi
    #
    echo "DEBUG: disk_name = \"$disk_name\", bcache_name = \"$bcache_name\""
    
    echo "Waiting for bcache device \"/dev/$bcache_name\" to appear..."
    while [ ! -e "/dev/$bcache_name" ]; do sleep 0.1; done
    
    # attach cache
    cache_found=
    
    # TODO: also accept serial of the bcache device, but then we require it is a partition table
    csetuuid=$(bcache-super-show "$bcache_cache" 2>/dev/null | awk '$1 == "cset.uuid" {print $2}')
    table=$(parted -s "$bcache_cache" print 2>/dev/null | awk -F": " '$1 == "Partition Table"{print $2}')
    if [ -n "$csetuuid" ]; then
        # if bcache device has bcache header, use it
        :
    elif [ "$table" = "gpt" -o "$table" = "msdos" ]; then
        # if bcache device is partitioned, use first found device with label ending in "bcache", eg. "ssd1-bcache"
        cbcache=$(readlink -f "$bcache_cache")
        for d in $(stat -c %n /dev/disk/by-partlabel/*[-_]bcache); do
            target=$(readlink -f "$d")
            if grep -Eq "^${cbcache}[0-9]+$" <<< "$target"; then
                csetuuid=$(bcache-super-show "$target" | awk '$1 == "cset.uuid" {print $2}')
                break
            fi
        done
        if [ -z "$csetuuid" ]; then
            echo "ERROR: failed to find bcache device on partitioned device \"$bcache\"" >&2
            return 1
        fi
    else
        # else fail
        echo "ERROR: \"$bcache\" is neither a partitioned device nor a bcache cache device." >&2
        return 1
    fi
    
    echo "$csetuuid" > "/sys/block/${bcache_name}/bcache/attach"
    echo writeback > "/sys/block/${bcache_name}/bcache/cache_mode"
}

# find devices by serial
# DO NOT use it on devices behind a LUN unless you're sure the serial seen by smartctl is unique.
# If you do not have a unique serial seen by smartctl, use the -d option to specify the device (eg. /dev/disk/by-id/wwn-...), and make up your own unique serial.
find_by_serial() {
    local serial="$1"
    
    if [ "${serial:0:4}" = "/dev" ]; then
        if [ ! -e "$serial" ]; then
            echo "osd serial \"$serial\" looks like a dev node, but the file doesn't exist... quitting"
            exit 1
        fi
        # it's not a serial, but a dev node... so just assume it's good and use it
        echo "$serial"
        return
    fi
    
    local device=
    for d in /sys/class/block/sd[a-z]*; do
        if grep -q "[0-9]$" <<< "$d"; then
            continue
        fi
        n=$(basename "$d")
        dserial=$(smartctl -i /dev/"$n" | awk '/Serial [Nn]umber:/ {print $NF}')

        if [ "$serial" = "$dserial" ]; then
            device="/dev/$n"
            break
        fi
    done

    echo "$device"
}

wait_for_exists() {
    local device="$1"
    # wait for the partition to appear... 
    local sleep_limit=30
    local sleep_count=0
    while [ ! -e "$device" ]; do
        echo "waiting for device $device"
        sleep 1
        let sleep_count++
        if [ "$sleep_count" -ge "$sleep_limit" ]; then
            echo "ERROR: waited too long... giving up"
            exit 1
        fi
    done
}

# Creates a partition table and the partitions needed for both the osd data filesystem and the osd's journal on the same device.
create_journal_colocated() {
    local suffix="$1"
    local whole_journal="$2"
    
    if ! parted -s "$whole_journal" print | grep -Eq "Partition Table: gpt"; then
        # if no partition table, make one
        echo "INFO: creating journal partition table on \"$whole_journal\""
        parted -s "$whole_journal" mktable gpt >/dev/null 2>&1
        if [ "$?" != 0 ]; then
            echo "ERROR: failed to create partition table on \"$whole_journal\"" >&2
            return 1
        fi
    fi
    
    # journal is global, so don't call this function inside $()
    journal="/dev/disk/by-partlabel/journal_${suffix}"

    # we check the labels separate from the device in case another device has the same labels
    if [ -e "$journal" ]; then
        echo "ERROR: osd journal already exists: \"$journal\"" >&2
        return 1
    fi
    if [ -e "$osd_data" ]; then
        echo "ERROR: osd data partition already exists: \"$osd_data\"" >&2
        return 1
    fi
    
    lines=$(parted "$whole_journal" -sm print | wc -l)
    if [ "$lines" -gt 2 ]; then
        echo "ERROR: The colocated journal+osd device already has partitions. Aborting." >&2
        return 1
    fi
    
    echo "INFO: creating journal partition on \"$whole_journal\""
    if ! sgdisk -n 0:0:+"$journal_size" "$whole_journal" >/dev/null 2>&1; then
        echo  "ERROR: failed to create journal partition" >&2
        return 1
    fi
    if ! sgdisk -n 0:0:-1 "$whole_journal" >/dev/null 2>&1; then
        echo "ERROR: failed to create osd data partition" >&2
        return 1
    fi
    
    if ! parted -s "$whole_journal" name 1 "journal_${suffix}" >/dev/null 2>&1; then
        echo  "ERROR: failed to set journal partlabel" >&2
        return 1
    fi
    if ! parted -s "$whole_journal" name 2 "data_${suffix}" >/dev/null 2>&1; then
        echo  "ERROR: failed to set data partlabel" >&2
        return 1
    fi
    
    # journal seems to work just fine
    # don't know why, but this is sometimes neeeded or the osd_data link is not created
    if [ ! -e "$osd_data" ]; then
        udevadm trigger
        while [ ! -e "$osd_data" ]; do
            # the osd_data link can take a few seconds
            sleep 1
        done
    fi
}

# sgdisk 0.8.8 on Ubuntu 14.04 doesn't support "0:..." in the -c option to set a name, so we fallback to this mess
create_partition() {
    local device size name old new d start end err
    
    device="$1"
    size="$2"
    name="$3"

    old=$(sgdisk -Pp "$device")

    # this will create a GPT table if there isn't one
    # and it will make the partition and give it a name
    # (all as a dry run, output only)
    if [ -n "$size" ]; then
        new=$(sgdisk -n 0:0:+"$size" -Pp "$device" 2>&1)
    else
        new=$(sgdisk -N 0 -Pp "$device" 2>&1)
    fi

    line=$(grep -Eo "Could not create partition [0-9]+ from [0-9]+ to [0-9]+" <<< "$new")
    if [ -n "$line" ]; then
        # don't know why it does this, but I don't care... I just want the start and end sectors
        start=$(sed -r "s|Could not create partition [0-9]+ from ([0-9]+) to ([0-9]+)|\1|" <<< "$line")
        end=$(sed -r "s|Could not create partition [0-9]+ from ([0-9]+) to ([0-9]+)|\2|" <<< "$line")
    fi
    
    if [ -z "$start" ]; then
        d=$(diff -u0 <(echo "$old" | awk '$1 ~ /^[0-9]+$/') <(echo "$new" | awk '$1 ~ /^[0-9]+$/') | tail -n1)
        if ! grep -qE "\+[ ]+[0-9]+[ ]+[0-9]+[ ]+[0-9]+[ ]+$(grep -Eo '[0-9]+'<<< "$size")" <<< "$d"; then
            echo "ERROR: the sgdisk name workaround failed... giving up. The diff between old and new partition table:" >&2
            echo "$d" >&2
            return 1
        fi
        start=$(awk '{print $3}' <<< "$d")
        end=$(awk '{print $4}' <<< "$d")
    fi
    
    err=$(parted -s "$device" mkpart "$name" "$start"s "$end"s 2>&1)
    if [ "$?" != 0 ]; then
        echo "ERROR: creating a partition on \"$device\" failed. Is there a GPT partition table and enough free space?" >&2
        echo "$err" >&2
        return 1
    fi
}

# Creates the partition needed for an osd's separate journal.
create_journal_separate() {
    local suffix="$1"
    local whole_journal="$2"

    local name="journal_${suffix}"
    local path="/dev/disk/by-partlabel/${name}"
    
    if [ -e "$path" ]; then
        #TODO: by default, error, but have a --force option which will ddd0 it
        echo "ERROR: osd journal already exists: \"$path\"" >&2
        return 1
    fi
    
    create_partition "$whole_journal" "$journal_size" "$name"
    if [ "$?" != 0 ]; then
        echo "ERROR: failed to create partition" >&2
        return 1
    fi
    
    while [ ! -e "$path" ]; do
        sleep 1
    done
    
    # journal is global, so don't call this function inside $()
    journal="${path}"
}

# Creates the partitions for separate journals and colocated osds and journals. See other create_journal_* functions.
create_journal() {
    local serial="$1"
    local whole_journal="$2"
    
    local suffix=
    if [ "${serial:0:4}" = "/dev" ]; then
        suffix=$(tr / _ <<< "${serial:5}")
    else
        suffix="$serial"
    fi

    if [ "$colocated" = true ]; then
        echo "INFO: creating colocated journal; suffix = \"$suffix\", whole_journal = \"$whole_journal\""
        create_journal_colocated "$suffix" "$whole_journal"
        return $?
    else
        echo "INFO: creating separate journal; suffix = \"$suffix\", whole_journal = \"$whole_journal\""
        create_journal_separate "$suffix" "$whole_journal"
        return $?
    fi
}

# Zeros the first 10 and last 10 MiB of a device to wipe out filesystem headers and superblocks. Unlike wipefs, it doesn't rely on any magic numbers to identify things to erase.
ddd0() {
    for device in "$@"; do
        if [ -z "$device" ]; then
            echo "USAGE: ddd0 <device>"
            return 1
        fi
        if [ ! -e "$device" ]; then
            echo "ERROR: device \"$device\" does not exist"
            return 1
        fi
        if [ ! -L "$device" -a ! -b "$device" -a ! -c "$device" ]; then
            echo "ERROR: device \"$device\" is not a link or a special file"
            return 1
        fi
        s=$(blockdev --getsize64 "$device")
        if [ "$s" -lt "20971520" ]; then
            dd if=/dev/zero of="$device" bs=1M >/dev/null 2>&1 | grep -vE "records|copied|No space left" >&2
        else
            dd if=/dev/zero of="$device" bs=1M count=10 >/dev/null 2>&1 | grep -vE "records|copied|No space left" >&2
            dd if=/dev/zero of="$device" bs=1M seek=$((s-10485760)) oflag=seek_bytes 2>&1 | grep -vE "records|copied|No space left" >&2
        fi
    done
}

fail() {
    echo "ERROR:" "$@" >&2
    exit 1
}

########################
# Main
########################

check_deps

if ! whoami | grep -q "^root$"; then
    echo "ERROR: this script must run as root"
    exit 1
fi

if [ -z "$whole_osddevice" ]; then
    whole_osddevice=$(find_by_serial "$serial")
fi
if [ -z "$whole_osddevice" ]; then
    fail "couldn't find osd device... serial = \"$serial\", whole_osddevice = \"$whole_osddevice\""
fi
if [ ! -e "$whole_osddevice" ]; then
    fail "couldn't find osd device \"$whole_osddevice\""
fi


if [ -z "$whole_journal" ]; then
    colocated=true
    whole_journal="$whole_osddevice"
fi


if [ "$store" = "bluestore" ]; then
    # TEST CODE - replace it with separate options for the different devices.
    # right now it doesn't do separate journal and puts db and wal on that device, and it hardcodes some small sizes
    parted -s "$whole_osddevice" mktable gpt
    echo "Creating data partition"
    create_partition "$whole_osddevice" 100MB "data_${serial}" || exit 1
    echo "Creating block partition"
    create_partition "$whole_osddevice" "" "block_${serial}" || exit 1
    
    if [ "$colocated" = false ]; then
        echo "Creating block.db partition"
        create_partition "$whole_journal" "$db_size" "block.db_${serial}" || exit 1
        
        wait_for_exists "/dev/disk/by-partlabel/block.db_${serial}"
        ddd0 "/dev/disk/by-partlabel/block.db_${serial}"
        
        echo "Creating block.wal partition"
        create_partition "$whole_journal" "$wal_size" "block.wal_${serial}" || exit 1
        
        ddd0 "/dev/disk/by-partlabel/block.wal_${serial}"
        wait_for_exists "/dev/disk/by-partlabel/block.wal_${serial}"
    fi
    
    osddevice="/dev/disk/by-partlabel/data_${serial}"
    osd_block="/dev/disk/by-partlabel/block_${serial}"
    osd_data="/dev/disk/by-partlabel/data_${serial}"
    bcache_backing="$osd_block"
else
    osddevice="$whole_osddevice"
    if [ "$colocated" = false ]; then
        osd_data="$osddevice"
    else
        osd_data="/dev/disk/by-partlabel/data_${serial}"
    fi
    osd_block="$osd_data"
    bcache_backing="$osd_block"
    
    echo "Creating journal on device \"$whole_journal\" for serial \"$serial\""
    # this function sets journal, so we don't use $() to avoid a subshell
    create_journal "$serial" "$whole_journal"
    if [ $? != 0 ]; then
        fail "failed to create journal"
    fi
    wait_for_exists "$journal"
    if [ -z "$journal" -o ! -e "$journal" -o ! -L "$journal" ]; then
        fail "failed to get journal path... result = \"$journal\""
    fi
fi

wait_for_exists "$osddevice"
wait_for_exists "$osd_block"
wait_for_exists "$osd_data"

if [ -z "$osddevice" -o ! -e "$osddevice" ]; then
    fail "failed to get data device path... result = \"$osddevice\""
fi

echo "Cleaning out device $osd_data"
ddd0 "$osd_data"

if [ -n "$osd_block" -a "$osd_data" != "$osd_block" ]; then
    echo "Cleaning out device $osd_block"
    ddd0 "$osd_data"
fi

if [ -n "$bcache_cache" ]; then
    echo "Creating bcache backing device \"$bcache_backing\" and attaching cache from \"$bcache_cache\""
    make_bcache "$bcache_backing" "$bcache_cache"
fi

if [ -z "$weight" ]; then
    # weight is TB in the device; ceph docs suggest this
    s=$(blockdev --getsize64 "$osddevice")
    weight=$(echo "scale=4; $s / 1000/1000/1000/1000" | bc)
fi

if [ -n "$journal" -a "$store" != "bluestore" ]; then
    echo "Cleaning out device \"$journal\""
    ddd0 "$journal"
fi

echo "Creating osd"
osd_uuid=$(uuidgen)
osd_number=$(ceph osd create "$osd_uuid")

# some cleanup...
ceph auth del "osd.$osd_number" 2>&1 | grep -vE "entity .* does not exist"
ceph osd crush rm osd."$osd_number" 2>&1 | grep -vE "device .* does not appear in the crush map"

if [ -e "/var/lib/ceph/osd/${cluster}-${osd_number}" ]; then
    count=$(find "/var/lib/ceph/osd/${cluster}-${osd_number}" | wc -l)
    if [ "$count" != 1 ]; then
        echo "ERROR: \"/var/lib/ceph/osd/${cluster}-${osd_number}\" exists and is not empty"
        echo "    if the data there is junk, simply run:"
        echo "        rm -rf --one-file-system \"/var/lib/ceph/osd/${cluster}-${osd_number}\""
        echo "        umount -l \"/var/lib/ceph/osd/${cluster}-${osd_number}\""
        exit 1
    fi
fi

mkdir -p "/var/lib/ceph/osd/${cluster}-${osd_number}"

if [ "$store" = "bluestore" ]; then
    fs_type=xfs
else
    fs_type="$store"
fi
echo "Creating \"$fs_type\" filesystem on \"$osd_data\""

if [ "$fs_type" = "xfs" ]; then
    mkfs.xfs -L "osd.$osd_number" -i size=2048 -l sectsize=4096 -d sectsize=4096 "$osd_data"
    fs_options="noatime,nodiratime,logbsize=256k,logbufs=8,inode64,nofail"
elif [ "$fs_type" = "ext4" ]; then
    # TODO: figure out what else is needed... mkfs options, mount options, ceph.conf options
    # -F is needed to do it on a whole device
    mkfs.ext4 -F -L "osd.$osd_number" "$osd_data"
    fs_options="noatime,nodiratime,nofail,user_xattr,journal_async_commit"
elif [ "$fs_type" = "btrfs" ]; then
    # TODO: figure out what else is needed... mkfs options, mount options, ceph.conf options
    # I took -l and -n suggestions from http://ceph.com/community/ceph-performance-part-2-write-throughput-without-ssd-journals/
    mkfs.btrfs -l 16k -n 16k -L "osd.$osd_number" "$osd_data"
    fs_options="noatime,nodiratime,user_subvol_rm_allowed,nofail"
    
    # also for some reason this config ends up false, but it is probably supposed to be true for btrfs. Is that a conf option, or is it supposed to be auto-detected?
    #        "filestore_journal_parallel": "false",

else
    echo "ERROR: unsupported storage backend type \"$store\""
fi

# for mount, doc said to use '-o user_xattr', but my machine says that's unknown for xfs
xfs_uuid=$(blkid -o value -s UUID "$osd_data")
if [ -z "$xfs_uuid" ]; then
    echo "ERROR: cannot find uuid of $osd_data" >&2
    exit 1
fi
sed -i -r "s|^([^#].*/var/lib/ceph/osd/${cluster}-${osd_number}[^0-9].*)|#\1|" /etc/fstab
echo "UUID=$xfs_uuid /var/lib/ceph/osd/${cluster}-${osd_number} ${fs_type} ${fs_options} 0 2" >> /etc/fstab
echo "Mounting filesystem \"/var/lib/ceph/osd/${cluster}-${osd_number}\""
mount "/var/lib/ceph/osd/${cluster}-${osd_number}" || fail "couldn't mount osd data dir"

#echo "TEST EXIT"; exit 1

if [ "$store" = "bluestore" ]; then
    if [ -n "$bcache_backing" ]; then
        ln -s "$osd_block" "/var/lib/ceph/osd/${cluster}-${osd_number}/block"
    else
        ln -s "/dev/disk/by-partlabel/block_${serial}" "/var/lib/ceph/osd/${cluster}-${osd_number}/block"
    fi
    if [ "$colocated" = false ]; then
        ln -s "/dev/disk/by-partlabel/block.db_${serial}" "/var/lib/ceph/osd/${cluster}-${osd_number}/block.db"
        ln -s "/dev/disk/by-partlabel/block.wal_${serial}" "/var/lib/ceph/osd/${cluster}-${osd_number}/block.wal"
    fi
else
    if [ -n "$journal" -a ! -e "/var/lib/ceph/osd/${cluster}-${osd_number}/journal" ]; then
        # for some reason, ceph-osd doesn't remember where its journal is... so add a link
        ln -s "$journal" "/var/lib/ceph/osd/${cluster}-${osd_number}/journal"
    fi
fi

echo "Preparing data directory"
if [ -n "$journal" ]; then
    ceph-osd -i ${osd_number} --osd-journal="$journal" --mkfs --mkkey --osd-uuid "$osd_uuid"
else
    ceph-osd -i ${osd_number} --mkfs --mkkey --osd-uuid "$osd_uuid"
fi

ceph auth add osd.${osd_number} osd 'allow *' mon 'allow profile osd' -i "/var/lib/ceph/osd/${cluster}-${osd_number}/keyring"

ceph --cluster "$cluster" osd crush add-bucket "$hostname" host 2>&1 | grep -vE "bucket.*already exists"
ceph osd crush move "$hostname" root=default 2>&1 | grep -vE "no need to move item id .* to location .* in crush map"
ceph --cluster "$cluster" osd crush add osd."$osd_number" "$weight" host="$hostname"

echo "Finishing up"
if which systemctl >/dev/null 2>&1; then
    touch "/var/lib/ceph/osd/${cluster}-${osd_number}/systemd"
else
    # using sysvinit even with upstart
    touch "/var/lib/ceph/osd/${cluster}-${osd_number}/sysvinit"
fi

chown -R ceph:ceph "/var/lib/ceph/osd/${cluster}-${osd_number}" 
if [ "$store" = "bluestore" ]; then
    if [ -n "$bcache" ]; then
        chown -R ceph:ceph "$(readlink -f "/var/lib/ceph/osd/${cluster}-${osd_number}/block")"
    else
        chown -R ceph:ceph "$(readlink -f "/var/lib/ceph/osd/${cluster}-${osd_number}/block")"
    fi
    if [ "$colocated" = false ]; then
        chown -R ceph:ceph "$(readlink -f "/var/lib/ceph/osd/${cluster}-${osd_number}/block.db")"
        chown -R ceph:ceph "$(readlink -f "/var/lib/ceph/osd/${cluster}-${osd_number}/block.wal")"
    fi
else
    chown -R ceph:ceph "$(readlink -f "/var/lib/ceph/osd/${cluster}-${osd_number}/journal")"
fi
if [ "$start" = 1 ]; then
    if which systemctl >/dev/null 2>&1; then
        systemctl start "ceph-osd@${osd_number}"
        systemctl enable "ceph-osd@${osd_number}"
    else
        # using sysvinit even with upstart
        service ceph start "osd.${osd_number}"
    fi
fi
